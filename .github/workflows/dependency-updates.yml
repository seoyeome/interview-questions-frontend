name: Dependency Updates

on:
  schedule:
    - cron: '0 0 * * 1'  # 매주 월요일마다 실행
  workflow_dispatch:      # 수동으로도 실행 가능

jobs:
  update-dependencies:
    name: Check & Update Dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
      
      - name: Install dependencies
        run: pnpm install

      # 보안 취약점 체크
      - name: Check for vulnerabilities
        id: audit
        run: |
          AUDIT_OUTPUT=$(pnpm audit --json || true)
          if [[ $AUDIT_OUTPUT == *"vulnerabilities"* ]]; then
            echo "has_vulnerabilities=true" >> $GITHUB_OUTPUT
          fi
          
      # 업데이트 체크 및 적용
      - name: Check and apply updates
        id: update
        run: |
          # 현재 package.json 백업
          cp package.json package.json.backup
          cp pnpm-lock.yaml pnpm-lock.yaml.backup
          
          # 업데이트 시도
          pnpm update --recursive
          
          # 변경사항이 있는지 확인
          if ! cmp -s pnpm-lock.yaml pnpm-lock.yaml.backup; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            # 변경된 패키지 목록을 환경 변수로 저장
            echo "PACKAGE_DIFF<<EOF" >> $GITHUB_ENV
            diff -U 0 pnpm-lock.yaml.backup pnpm-lock.yaml | grep '^[-+]  ' | grep -v '^[-+]  resolution: ' >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      # PR 생성 (변경사항이 있을 경우)
      - name: Create Pull Request
        if: steps.audit.outputs.has_vulnerabilities == 'true' || steps.update.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "⬆️ 의존성 업데이트"
          body: |
            자동 의존성 업데이트가 실행되었습니다.
            
            ## 변경된 패키지
            ```diff
            ${{ env.PACKAGE_DIFF }}
            ```
            
            ## 체크리스트
            - [ ] 테스트 코드 실행
            - [ ] 개발 환경에서 테스트
          branch: "chore/dependency-updates"
          base: "main"
          delete-branch: true
          labels: |
            dependencies
            automated-pr

      # 메이저/마이너 업데이트 확인
      - name: Check for major/minor updates
        id: check-major-minor
        run: |
          # outdated 정보를 파일로 저장
          pnpm outdated --json > outdated.json || true
          if [ -s outdated.json ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
          fi
      
      # 메이저/마이너 업데이트 이슈 생성
      - name: Create Issue for major/minor updates
        if: steps.check-major-minor.outputs.has_updates == 'true'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "📦 메이저/마이너 버전 업데이트 가능"
          content-filepath: outdated.json
          labels: "dependencies,needs-review" 